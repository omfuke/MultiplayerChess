[{"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\index.js":"1","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\App.js":"2","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\reportWebVitals.js":"3","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Board.js":"4","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Tyle\\Tyle.js":"5","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Pawn.js":"6","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Rook.js":"7","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Knight.js":"8","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Bishop.js":"9","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Queen.js":"10","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\King.js":"11","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\PawnRules2.js":"12","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\KnightRules2.js":"13","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\RookRules2.js":"14","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\QueenRules2.js":"15","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\BishopRules2.js":"16","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\KingRules2.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":172,"mtime":1614499005477,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":15490,"mtime":1614937247321,"results":"22","hashOfConfig":"19"},{"size":1774,"mtime":1614935710310,"results":"23","hashOfConfig":"19"},{"size":3377,"mtime":1614835344222,"results":"24","hashOfConfig":"19"},{"size":2917,"mtime":1614932558956,"results":"25","hashOfConfig":"19"},{"size":5223,"mtime":1614931635314,"results":"26","hashOfConfig":"19"},{"size":4478,"mtime":1614931617937,"results":"27","hashOfConfig":"19"},{"size":10012,"mtime":1614789043365,"results":"28","hashOfConfig":"19"},{"size":4991,"mtime":1614816835068,"results":"29","hashOfConfig":"19"},{"size":1488,"mtime":1614837148960,"results":"30","hashOfConfig":"19"},{"size":2521,"mtime":1614931642030,"results":"31","hashOfConfig":"19"},{"size":1629,"mtime":1614901801870,"results":"32","hashOfConfig":"19"},{"size":7386,"mtime":1614902519584,"results":"33","hashOfConfig":"19"},{"size":4480,"mtime":1614931616499,"results":"34","hashOfConfig":"19"},{"size":2353,"mtime":1614903807304,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"3nfcky",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\index.js",[],["75","76"],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\App.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\reportWebVitals.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Board.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import React, { useState } from \"react\";\r\nimport \"./Board.css\";\r\nimport Tyle from \"./Tyle/Tyle\";\r\nimport { pawnRules } from \"./Rules/Pawn\";\r\nimport { rookRules } from \"./Rules/Rook\";\r\nimport { KnightRules } from \"./Rules/Knight\";\r\nimport { BishopRules } from \"./Rules/Bishop\";\r\nimport { QueenRules } from \"./Rules/Queen\";\r\nimport { KingRules } from \"./Rules/King\";\r\nimport { pawnRules2 } from \"./Rules/PawnRules2\";\r\nimport { KnightRules2 } from \"./Rules/KnightRules2\";\r\nimport { RookRules2 } from \"./Rules/RookRules2\";\r\nimport { QueenRules2 } from \"./Rules/QueenRules2\";\r\nimport { BishopRules2 } from \"./Rules/BishopRules2\";\r\nimport { KingRules2 } from \"./Rules/KingRules2\";\r\n\r\nfunction Board() {\r\n  const [board, setBoard] = useState([\r\n    [\r\n      { name: \"rook\", color: \"black\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"black\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"black\", selected: false, jump: false },\r\n      { name: \"queen\", color: \"black\", selected: false, jump: false },\r\n      { name: \"king\", color: \"black\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"black\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"black\", selected: false, jump: false },\r\n      { name: \"rook\", color: \"black\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"rook\", color: \"white\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"white\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"white\", selected: false, jump: false },\r\n      { name: \"queen\", color: \"white\", selected: false, jump: false },\r\n      { name: \"king\", color: \"white\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"white\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"white\", selected: false, jump: false },\r\n      { name: \"rook\", color: \"white\", selected: false, jump: false },\r\n    ],\r\n  ]);\r\n\r\n  const [location, setLocation] = useState(null);\r\n\r\n  const [chance, setChance] = useState(false);\r\n  const piece = chance ? \"black\" : \"white\";\r\n\r\n  if (location) {\r\n    //console.log(location);\r\n  }\r\n\r\n  const checkKing = (board, availablePositions, detail) => {\r\n    const color = detail.color === \"white\" ? \"black\" : \"white\";\r\n    const pieces = [];\r\n    let indexes = [];\r\n    board.map((x, index) =>\r\n      x.map((p, ind) => {\r\n        if (p.color === color) {\r\n          pieces.push({ ...p, position: [index, ind] });\r\n        }\r\n      })\r\n    );\r\n\r\n    for (const key in pieces) {\r\n      if (Object.hasOwnProperty.call(pieces, key)) {\r\n        const element = pieces[key];\r\n        // console.log(element);\r\n        let pos;\r\n\r\n        switch (element.name) {\r\n          case \"pawn\":\r\n            pos = pawnRules2(element.position, element, board);\r\n            break;\r\n          case \"rook\":\r\n            pos = RookRules2(element.position, element, board);\r\n            break;\r\n\r\n          case \"knight\":\r\n            pos = KnightRules2(element.position, element, board);\r\n            break;\r\n\r\n          case \"queen\":\r\n            pos = QueenRules2(element.position, element, board);\r\n            break;\r\n\r\n          case \"king\":\r\n            pos = KingRules2(element.position, element, board);\r\n            break;\r\n\r\n          case \"bishop\":\r\n            pos = BishopRules2(element.position, element, board);\r\n\r\n            break;\r\n\r\n          default:\r\n            pos = [];\r\n            break;\r\n        }\r\n\r\n        console.log(pos);\r\n        availablePositions.map((x, index) => {\r\n          pos.map((p) => {\r\n            if (JSON.stringify(x) == JSON.stringify(p)) {\r\n              indexes.push(index);\r\n              console.log(x);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    const indexSet = new Set(indexes);\r\n    const arrayWithValuesRemoved = availablePositions.filter(\r\n      (value, i) => !indexSet.has(i)\r\n    );\r\n    console.log(arrayWithValuesRemoved);\r\n\r\n    console.log(indexes);\r\n    // console.log(pieces);\r\n    console.log(availablePositions);\r\n    return arrayWithValuesRemoved;\r\n  };\r\n\r\n  const goToLocation = (position) => {\r\n    // console.log(location, position);\r\n\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        j.selected = false;\r\n        j.jump = false;\r\n        j.check = false;\r\n      })\r\n    );\r\n\r\n    //killing logic\r\n\r\n    if (board[position[0]][position[1]].name) {\r\n      newboard[location[0]][location[1]] = {\r\n        name: null,\r\n        selected: false,\r\n        jump: false,\r\n      };\r\n      newboard[position[0]][position[1]] = board[location[0]][location[1]];\r\n      const piece2 = chance ? \"white\" : \"black\";\r\n\r\n      ////check\r\n      let kingLocation;\r\n\r\n      newboard.map((x, index) =>\r\n        x.map((p, ind) => {\r\n          if (p.color == piece2 && p.name == \"king\") {\r\n            kingLocation = [index, ind];\r\n            return;\r\n          }\r\n        })\r\n      );\r\n\r\n      console.log(kingLocation, piece2);\r\n\r\n      const pieces = [];\r\n\r\n      newboard.map((x, index) =>\r\n        x.map((p, ind) => {\r\n          if (p.color === piece) {\r\n            pieces.push({ ...p, position: [index, ind] });\r\n          }\r\n        })\r\n      );\r\n\r\n      for (const key in pieces) {\r\n        if (Object.hasOwnProperty.call(pieces, key)) {\r\n          const element = pieces[key];\r\n          // console.log(element);\r\n          let pos;\r\n\r\n          switch (element.name) {\r\n            case \"pawn\":\r\n              pos = pawnRules(element.position, element, newboard);\r\n              break;\r\n            case \"rook\":\r\n              pos = rookRules(element.position, element, newboard);\r\n              break;\r\n\r\n            case \"knight\":\r\n              pos = KnightRules(element.position, element, newboard);\r\n              break;\r\n\r\n            case \"queen\":\r\n              pos = QueenRules(element.position, element, newboard);\r\n              break;\r\n\r\n            case \"king\":\r\n              pos = KingRules(element.position, element, newboard);\r\n              break;\r\n\r\n            case \"bishop\":\r\n              pos = BishopRules(element.position, element, newboard);\r\n\r\n              break;\r\n\r\n            default:\r\n              pos = [];\r\n              break;\r\n          }\r\n\r\n          console.log(pos);\r\n          pos.map((p) => {\r\n            if (JSON.stringify(p) == JSON.stringify(kingLocation)) {\r\n              newboard[kingLocation[0]][kingLocation[1]] = {\r\n                ...newboard[kingLocation[0]][kingLocation[1]],\r\n                check: true,\r\n              };\r\n              console.log(kingLocation, \"hiiiiiiiiiiiiiiii\");\r\n            }\r\n          });\r\n\r\n          // availablePositions.map((x, index) => {\r\n          //   pos.map((p) => {\r\n          //     if (JSON.stringify(x) == JSON.stringify(p)) {\r\n          //       indexes.push(index);\r\n          //       console.log(x);\r\n          //     }\r\n          //   });\r\n          // });\r\n        }\r\n      }\r\n\r\n      setBoard(newboard);\r\n      setChance(!chance);\r\n\r\n      return;\r\n    }\r\n\r\n    newboard[location[0]][location[1]] = board[position[0]][position[1]];\r\n    newboard[position[0]][position[1]] = board[location[0]][location[1]];\r\n\r\n    const piece2 = chance ? \"white\" : \"black\";\r\n\r\n    ////check\r\n    let kingLocation;\r\n\r\n    newboard.map((x, index) =>\r\n      x.map((p, ind) => {\r\n        if (p.color == piece2 && p.name == \"king\") {\r\n          kingLocation = [index, ind];\r\n          return;\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(kingLocation, piece2);\r\n\r\n    const pieces = [];\r\n\r\n    newboard.map((x, index) =>\r\n      x.map((p, ind) => {\r\n        if (p.color === piece) {\r\n          pieces.push({ ...p, position: [index, ind] });\r\n        }\r\n      })\r\n    );\r\n\r\n    for (const key in pieces) {\r\n      if (Object.hasOwnProperty.call(pieces, key)) {\r\n        const element = pieces[key];\r\n        // console.log(element);\r\n        let pos;\r\n\r\n        switch (element.name) {\r\n          case \"pawn\":\r\n            pos = pawnRules(element.position, element, newboard);\r\n            break;\r\n          case \"rook\":\r\n            pos = rookRules(element.position, element, newboard);\r\n            break;\r\n\r\n          case \"knight\":\r\n            pos = KnightRules(element.position, element, newboard);\r\n            break;\r\n\r\n          case \"queen\":\r\n            pos = QueenRules(element.position, element, newboard);\r\n            break;\r\n\r\n          case \"king\":\r\n            pos = KingRules(element.position, element, newboard);\r\n            break;\r\n\r\n          case \"bishop\":\r\n            pos = BishopRules(element.position, element, newboard);\r\n\r\n            break;\r\n\r\n          default:\r\n            pos = [];\r\n            break;\r\n        }\r\n\r\n        console.log(pos);\r\n        pos.map((p) => {\r\n          if (JSON.stringify(p) == JSON.stringify(kingLocation)) {\r\n            newboard[kingLocation[0]][kingLocation[1]] = {\r\n              ...newboard[kingLocation[0]][kingLocation[1]],\r\n              check: true,\r\n            };\r\n            console.log(kingLocation, \"hiiiiiiiiiiiiiiii\");\r\n            return;\r\n          }\r\n        });\r\n\r\n        // availablePositions.map((x, index) => {\r\n        //   pos.map((p) => {\r\n        //     if (JSON.stringify(x) == JSON.stringify(p)) {\r\n        //       indexes.push(index);\r\n        //       console.log(x);\r\n        //     }\r\n        //   });\r\n        // });\r\n      }\r\n    }\r\n\r\n    setBoard(newboard);\r\n    setChance(!chance);\r\n\r\n    return;\r\n  };\r\n\r\n  //this function is for toggle off the piece on Click\r\n\r\n  const allFalse = () => {\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        j.selected = false;\r\n        j.jump = false;\r\n      })\r\n    );\r\n\r\n    setBoard(newboard);\r\n  };\r\n\r\n  //this function is for showing available location for move\r\n\r\n  const checking = (detail, position) => {\r\n    console.log(position, detail);\r\n\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    const pieceRules = () => {\r\n      switch (detail.name) {\r\n        case \"pawn\":\r\n          return pawnRules(position, detail, newboard);\r\n\r\n        case \"rook\":\r\n          return rookRules(position, detail, newboard);\r\n        case \"knight\":\r\n          return KnightRules(position, detail, newboard);\r\n        case \"bishop\":\r\n          return BishopRules(position, detail, newboard);\r\n        case \"queen\":\r\n          return QueenRules(position, detail, newboard);\r\n\r\n        case \"king\":\r\n          return KingRules(position, detail, newboard);\r\n\r\n        default:\r\n          return pawnRules(position, detail, newboard);\r\n      }\r\n    };\r\n\r\n    let availablePositions = pieceRules();\r\n\r\n    if (detail.name === \"king\") {\r\n      availablePositions = checkKing(newboard, availablePositions, detail);\r\n    }\r\n\r\n    newboard[position[0]][position[1]] = {\r\n      ...board[position[0]][position[1]],\r\n      selected: true,\r\n    };\r\n\r\n    if (availablePositions) {\r\n      availablePositions.map((pos) => {\r\n        newboard[pos[0]][pos[1]] = { ...board[pos[0]][pos[1]], jump: true };\r\n      });\r\n    }\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        if ((index !== position[0] || ind !== position[1]) && j !== null) {\r\n          j.selected = false;\r\n        }\r\n      })\r\n    );\r\n\r\n    setBoard(newboard);\r\n  };\r\n  let tyle;\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <div className=\"Board\">\r\n        {board.map((i, index) => {\r\n          return i.map((j, ind) => {\r\n            if (index % 2 === 0) {\r\n              if (ind % 2 === 0) {\r\n                tyle = true;\r\n              } else {\r\n                tyle = false;\r\n              }\r\n            } else {\r\n              if (ind % 2 === 0) {\r\n                tyle = false;\r\n              } else {\r\n                tyle = true;\r\n              }\r\n            }\r\n\r\n            return (\r\n              <Tyle\r\n                key={[index, ind]}\r\n                checking={checking}\r\n                tyle={tyle}\r\n                detail={j}\r\n                position={[index, ind]}\r\n                selected={setLocation}\r\n                allFalse={allFalse}\r\n                goToLocation={goToLocation}\r\n                piece={piece}\r\n              ></Tyle>\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Tyle\\Tyle.js",["102"],"import React, { useState } from \"react\";\r\nimport \"./Tyle.css\";\r\n\r\nfunction Tyle({\r\n  tyle,\r\n  detail,\r\n  position,\r\n  checking,\r\n  selected,\r\n  allFalse,\r\n  goToLocation,\r\n  piece,\r\n}) {\r\n  // console.log(detail, position);\r\n\r\n  // const [click, setClick] = useState(false);\r\n\r\n  const clickHandler = (checking, detail, position) => {\r\n    // setClick(!click);\r\n    // if (click) {\r\n    //   allFalse();\r\n    //   return;\r\n    // }\r\n\r\n    if (detail.jump) {\r\n      goToLocation(position);\r\n\r\n      return;\r\n    }\r\n\r\n    if (detail.color === piece) {\r\n      selected(position);\r\n      allFalse();\r\n      //console.log(\"clickable\");\r\n      checking(detail, position);\r\n\r\n      return;\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"Tyle\"\r\n      style={{\r\n        backgroundColor: tyle ? \"#D68910\" : \"#ffcc99\",\r\n\r\n        ...(detail.selected\r\n          ? {\r\n              boxShadow: \"inset 0 0 10px #311b0b\",\r\n            }\r\n          : {}),\r\n        ...(detail.jump && { boxShadow: \"inset 0 0 15px #0f0\" }),\r\n        ...(detail.check && { boxShadow: \"inset 0 0 15px red\" }),\r\n      }}\r\n    >\r\n      <div\r\n        onClick={() => clickHandler(checking, detail, position)}\r\n        style={{\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          ...(detail.color === piece || detail.jump\r\n            ? { cursor: \"pointer\" }\r\n            : { cursor: \"auto\" }),\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          margin: \"7.5px\",\r\n        }}\r\n      >\r\n        <i\r\n          style={{\r\n            color: detail && `${detail.color}`,\r\n          }}\r\n          className={detail && `fas fa-chess-${detail.name} fa-2x`}\r\n        ></i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tyle;\r\n","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Pawn.js",["103","104","105","106","107","108","109","110"],"const pawnRules = (position, detail, board) => {\r\n  let locations = [];\r\n  if (detail.color === \"white\") {\r\n    if (position[0] === 6) {\r\n      if (board[position[0] - 1][position[1]].name == null) {\r\n        let pos = [position[0] - 1, position[1]];\r\n        locations.push(pos);\r\n      }\r\n      if (\r\n        board[position[0] - 2][position[1]].name == null &&\r\n        board[position[0] - 1][position[1]].name == null\r\n      ) {\r\n        let pos = [position[0] - 2, position[1]];\r\n        locations.push(pos);\r\n      }\r\n\r\n      if (position[1] - 1 >= 0) {\r\n        if (board[position[0] - 1][position[1] - 1].color == \"black\") {\r\n          let pos = [position[0] - 1, position[1] - 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n      if (position[1] + 1 < 8) {\r\n        if (board[position[0] - 1][position[1] + 1].color == \"black\") {\r\n          let pos = [position[0] - 1, position[1] + 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n\r\n      return locations;\r\n    } else {\r\n      if (position[0] - 1 >= 0) {\r\n        if (board[position[0] - 1][position[1]].name == null) {\r\n          let pos = [position[0] - 1, position[1]];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n\r\n      if (position[1] - 1 >= 0 && position[0] - 1 >= 0) {\r\n        if (board[position[0] - 1][position[1] - 1].color == \"black\") {\r\n          let pos = [position[0] - 1, position[1] - 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n      if (position[1] + 1 < 8 && position[0] - 1 >= 0) {\r\n        if (board[position[0] - 1][position[1] + 1].color == \"black\") {\r\n          let pos = [position[0] - 1, position[1] + 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n\r\n      return locations;\r\n    }\r\n  } else {\r\n    if (position[0] === 1) {\r\n      if (board[position[0] + 1][position[1]].name == null) {\r\n        let pos = [position[0] + 1, position[1]];\r\n        locations.push(pos);\r\n      }\r\n\r\n      if (\r\n        board[position[0] + 2][position[1]].name == null &&\r\n        board[position[0] + 1][position[1]].name == null\r\n      ) {\r\n        let pos = [position[0] + 2, position[1]];\r\n        locations.push(pos);\r\n      }\r\n\r\n      if (position[1] - 1 >= 0) {\r\n        if (board[position[0] + 1][position[1] - 1].color == \"white\") {\r\n          let pos = [position[0] + 1, position[1] - 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n      if (position[1] + 1 < 8) {\r\n        if (board[position[0] + 1][position[1] + 1].color == \"white\") {\r\n          let pos = [position[0] + 1, position[1] + 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n\r\n      return locations;\r\n    } else {\r\n      if (position[0] + 1 < 8) {\r\n        if (board[position[0] + 1][position[1]].name == null) {\r\n          let pos = [position[0] + 1, position[1]];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n      if (position[1] - 1 >= 0 && position[0] + 1 < 8) {\r\n        if (board[position[0] + 1][position[1] - 1].color == \"white\") {\r\n          let pos = [position[0] + 1, position[1] - 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n      if (position[1] + 1 < 8 && position[0] + 1 < 8) {\r\n        if (board[position[0] + 1][position[1] + 1].color == \"white\") {\r\n          let pos = [position[0] + 1, position[1] + 1];\r\n          locations.push(pos);\r\n        }\r\n      }\r\n\r\n      return locations;\r\n    }\r\n  }\r\n};\r\n\r\nexport { pawnRules };\r\n","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Rook.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Knight.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Bishop.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Queen.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\King.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\PawnRules2.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\KnightRules2.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\RookRules2.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\QueenRules2.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\BishopRules2.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\KingRules2.js",[],["111","112"],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":115,"column":22,"nodeType":"119","messageId":"120","endLine":115,"endColumn":24},{"ruleId":"117","severity":1,"message":"118","line":159,"column":43,"nodeType":"119","messageId":"120","endLine":159,"endColumn":45},{"ruleId":"117","severity":1,"message":"118","line":160,"column":23,"nodeType":"119","messageId":"120","endLine":160,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":161,"column":35,"nodeType":"123","messageId":"124","endLine":161,"endColumn":37},{"ruleId":"117","severity":1,"message":"118","line":190,"column":22,"nodeType":"119","messageId":"120","endLine":190,"endColumn":24},{"ruleId":"117","severity":1,"message":"125","line":212,"column":24,"nodeType":"119","messageId":"126","endLine":212,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":213,"column":23,"nodeType":"123","messageId":"124","endLine":213,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":213,"column":43,"nodeType":"123","messageId":"124","endLine":213,"endColumn":45},{"ruleId":"117","severity":1,"message":"118","line":215,"column":13,"nodeType":"127","messageId":"128","endLine":215,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":225,"column":24,"nodeType":"119","messageId":"120","endLine":225,"endColumn":26},{"ruleId":"129","severity":1,"message":"130","line":269,"column":19,"nodeType":"119","messageId":"131","endLine":277,"endColumn":12},{"ruleId":"117","severity":1,"message":"118","line":269,"column":23,"nodeType":"119","messageId":"120","endLine":269,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":270,"column":35,"nodeType":"123","messageId":"124","endLine":270,"endColumn":37},{"ruleId":"117","severity":1,"message":"125","line":305,"column":22,"nodeType":"119","messageId":"126","endLine":305,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":306,"column":21,"nodeType":"123","messageId":"124","endLine":306,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":306,"column":41,"nodeType":"123","messageId":"124","endLine":306,"endColumn":43},{"ruleId":"117","severity":1,"message":"118","line":308,"column":11,"nodeType":"127","messageId":"128","endLine":308,"endColumn":18},{"ruleId":"117","severity":1,"message":"118","line":318,"column":22,"nodeType":"119","messageId":"120","endLine":318,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":362,"column":17,"nodeType":"119","messageId":"131","endLine":371,"endColumn":10},{"ruleId":"117","severity":1,"message":"125","line":362,"column":21,"nodeType":"119","messageId":"126","endLine":362,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":363,"column":33,"nodeType":"123","messageId":"124","endLine":363,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":369,"column":13,"nodeType":"127","messageId":"128","endLine":369,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":398,"column":22,"nodeType":"119","messageId":"120","endLine":398,"endColumn":24},{"ruleId":"117","severity":1,"message":"118","line":450,"column":36,"nodeType":"119","messageId":"120","endLine":450,"endColumn":38},{"ruleId":"117","severity":1,"message":"118","line":456,"column":22,"nodeType":"119","messageId":"120","endLine":456,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":18,"column":59,"nodeType":"123","messageId":"124","endLine":18,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":24,"column":59,"nodeType":"123","messageId":"124","endLine":24,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":40,"column":59,"nodeType":"123","messageId":"124","endLine":40,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":46,"column":59,"nodeType":"123","messageId":"124","endLine":46,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":70,"column":59,"nodeType":"123","messageId":"124","endLine":70,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":76,"column":59,"nodeType":"123","messageId":"124","endLine":76,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":91,"column":59,"nodeType":"123","messageId":"124","endLine":91,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":97,"column":59,"nodeType":"123","messageId":"124","endLine":97,"endColumn":61},{"ruleId":"113","replacedBy":"136"},{"ruleId":"115","replacedBy":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'kingLocation', 'kingLocation', 'kingLocation', 'kingLocation', 'kingLocation', 'kingLocation'.","unsafeRefs","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["138"],["139"],"no-global-assign","no-unsafe-negation"]