[{"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\index.js":"1","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\App.js":"2","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\reportWebVitals.js":"3","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Board.js":"4","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Tyle\\Tyle.js":"5","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Pawn.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":172,"mtime":1614499005477,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":7586,"mtime":1614721522742,"results":"11","hashOfConfig":"8"},{"size":1705,"mtime":1614720389038,"results":"12","hashOfConfig":"8"},{"size":2626,"mtime":1614756117015,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3nfcky",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\index.js",[],["29","30"],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\App.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\reportWebVitals.js",[],"C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Board.js",["31","32","33","34"],"import React, { useState } from \"react\";\r\nimport \"./Board.css\";\r\nimport Tyle from \"./Tyle/Tyle\";\r\nimport { pawnRules } from \"./Rules/Pawn\";\r\n\r\nfunction Board() {\r\n  const [board, setBoard] = useState([\r\n    [\r\n      { name: \"rook\", color: \"black\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"black\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"black\", selected: false, jump: false },\r\n      { name: \"king\", color: \"black\", selected: false, jump: false },\r\n      { name: \"queen\", color: \"black\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"black\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"black\", selected: false, jump: false },\r\n      { name: \"rook\", color: \"black\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"black\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n      { name: null, selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n      { name: \"pawn\", color: \"white\", selected: false, jump: false },\r\n    ],\r\n    [\r\n      { name: \"rook\", color: \"white\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"white\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"white\", selected: false, jump: false },\r\n      { name: \"king\", color: \"white\", selected: false, jump: false },\r\n      { name: \"queen\", color: \"white\", selected: false, jump: false },\r\n      { name: \"bishop\", color: \"white\", selected: false, jump: false },\r\n      { name: \"knight\", color: \"white\", selected: false, jump: false },\r\n      { name: \"rook\", color: \"white\", selected: false, jump: false },\r\n    ],\r\n  ]);\r\n\r\n  const [location, setLocation] = useState(null);\r\n\r\n  const [chance, setChance] = useState(false);\r\n  const piece = chance ? \"black\" : \"white\";\r\n\r\n  if (location) {\r\n    //console.log(location);\r\n  }\r\n\r\n  const goToLocation = (position) => {\r\n    // console.log(location, position);\r\n\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        j.selected = false;\r\n        j.jump = false;\r\n      })\r\n    );\r\n\r\n    newboard[location[0]][location[1]] = board[position[0]][position[1]];\r\n    newboard[position[0]][position[1]] = board[location[0]][location[1]];\r\n    setBoard(newboard);\r\n    setChance(!chance);\r\n\r\n    return;\r\n  };\r\n\r\n  //this function is for toggle off the piece on Click\r\n\r\n  const allFalse = () => {\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        j.selected = false;\r\n        j.jump = false;\r\n      })\r\n    );\r\n\r\n    setBoard(newboard);\r\n  };\r\n\r\n  //this function is for showing available location for move\r\n\r\n  const checking = (detail, position) => {\r\n    console.log(position, detail);\r\n\r\n    const newboard = board.map(function (arr) {\r\n      return arr.slice();\r\n    });\r\n\r\n    const pieceRules = () => {\r\n      switch (detail.name) {\r\n        case \"pawn\":\r\n          return pawnRules(position, detail, newboard);\r\n\r\n        default:\r\n          return pawnRules(position, detail, newboard);\r\n      }\r\n    };\r\n\r\n    const availablePositions = pieceRules();\r\n\r\n    newboard[position[0]][position[1]] = {\r\n      ...board[position[0]][position[1]],\r\n      selected: true,\r\n    };\r\n\r\n    if (availablePositions) {\r\n      availablePositions.map((pos) => {\r\n        newboard[pos[0]][pos[1]] = { ...board[pos[0]][pos[1]], jump: true };\r\n      });\r\n    }\r\n\r\n    newboard.map((i, index) =>\r\n      i.map((j, ind) => {\r\n        if ((index !== position[0] || ind !== position[1]) && j !== null) {\r\n          j.selected = false;\r\n        }\r\n      })\r\n    );\r\n\r\n    setBoard(newboard);\r\n  };\r\n  let tyle;\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <div className=\"Board\">\r\n        {board.map((i, index) => {\r\n          return i.map((j, ind) => {\r\n            if (index % 2 === 0) {\r\n              if (ind % 2 === 0) {\r\n                tyle = true;\r\n              } else {\r\n                tyle = false;\r\n              }\r\n            } else {\r\n              if (ind % 2 === 0) {\r\n                tyle = false;\r\n              } else {\r\n                tyle = true;\r\n              }\r\n            }\r\n\r\n            return (\r\n              <Tyle\r\n                key={[index, ind]}\r\n                checking={checking}\r\n                tyle={tyle}\r\n                detail={j}\r\n                position={[index, ind]}\r\n                selected={setLocation}\r\n                allFalse={allFalse}\r\n                goToLocation={goToLocation}\r\n                piece={piece}\r\n              ></Tyle>\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Tyle\\Tyle.js",["35"],"import React, { useState } from \"react\";\r\nimport \"./Tyle.css\";\r\n\r\nfunction Tyle({\r\n  tyle,\r\n  detail,\r\n  position,\r\n  checking,\r\n  selected,\r\n  allFalse,\r\n  goToLocation,\r\n  piece,\r\n}) {\r\n  // console.log(detail, position);\r\n\r\n  // const [click, setClick] = useState(false);\r\n\r\n  const clickHandler = (checking, detail, position) => {\r\n    // setClick(!click);\r\n    // if (click) {\r\n    //   allFalse();\r\n    //   return;\r\n    // }\r\n\r\n    if (detail.jump) {\r\n      goToLocation(position);\r\n      return;\r\n    }\r\n\r\n    if (detail.color === piece) {\r\n      selected(position);\r\n      allFalse();\r\n      //console.log(\"clickable\");\r\n      checking(detail, position);\r\n\r\n      return;\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"Tyle\"\r\n      style={{\r\n        backgroundColor: tyle ? \"#D68910\" : \"#ffcc99\",\r\n\r\n        ...(detail.selected\r\n          ? {\r\n              boxShadow: \"inset 0 0 10px #311b0b\",\r\n            }\r\n          : {}),\r\n        ...(detail.jump && { boxShadow: \"inset 0 0 15px #0f0\" }),\r\n      }}\r\n    >\r\n      <div\r\n        onClick={() => clickHandler(checking, detail, position)}\r\n        style={{\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          ...(detail.color === piece || detail.jump\r\n            ? { cursor: \"pointer\" }\r\n            : { cursor: \"auto\" }),\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          margin: \"7.5px\",\r\n        }}\r\n      >\r\n        <i\r\n          style={{\r\n            color: detail && `${detail.color}`,\r\n          }}\r\n          className={detail && `fas fa-chess-${detail.name} fa-2x`}\r\n        ></i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tyle;\r\n","C:\\Users\\omfuk\\Desktop\\MultiplayerChess\\client\\src\\Board\\Rules\\Pawn.js",["36","37","38","39","40","41","42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":107,"column":22,"nodeType":"50","messageId":"51","endLine":107,"endColumn":24},{"ruleId":"48","severity":1,"message":"49","line":129,"column":22,"nodeType":"50","messageId":"51","endLine":129,"endColumn":24},{"ruleId":"48","severity":1,"message":"49","line":165,"column":36,"nodeType":"50","messageId":"51","endLine":165,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":171,"column":22,"nodeType":"50","messageId":"51","endLine":171,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},{"ruleId":"56","severity":1,"message":"57","line":16,"column":57,"nodeType":"58","messageId":"59","endLine":16,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":20,"column":57,"nodeType":"58","messageId":"59","endLine":20,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":30,"column":57,"nodeType":"58","messageId":"59","endLine":30,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":34,"column":57,"nodeType":"58","messageId":"59","endLine":34,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":52,"column":57,"nodeType":"58","messageId":"59","endLine":52,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":56,"column":57,"nodeType":"58","messageId":"59","endLine":56,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":66,"column":57,"nodeType":"58","messageId":"59","endLine":66,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":70,"column":57,"nodeType":"58","messageId":"59","endLine":70,"endColumn":59},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]